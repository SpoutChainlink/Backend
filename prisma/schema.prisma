// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  walletAddress String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
}

model Asset {
  id          Int      @id @default(autoincrement())
  symbol      String   @unique
  name        String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Order {
  id        Int      @id @default(autoincrement())
  type      OrderType
  status    OrderStatus @default(PENDING)
  amount    Float
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  assetId   Int
  asset     Asset    @relation(fields: [assetId], references: [id])

  // Blockchain transaction tracking
  transactionHash String?  @unique // The blockchain transaction hash
  blockNumber     Int?     // The block number where the transaction was mined
  blockTimestamp  DateTime? // When the transaction was mined

  // Off-chain API tracking
  externalOrderId String?  // ID from the off-chain API
  apiResponse     Json?    // Store the full API response including event data
  errorMessage    String?  // Store any error messages

  // Indexes for better query performance
  @@index([transactionHash])
  @@index([status])
  @@index([createdAt])
  @@index([userId])
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  PENDING     // Initial state when order is created from blockchain event
  PROCESSING  // Order is being processed by off-chain API
  COMPLETED   // Order was successfully processed
  FAILED      // Order failed during processing
  CANCELLED   // Order was cancelled
}
